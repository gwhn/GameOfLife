@model dynamic

<!DOCTYPE html>

<html>
    <head>
        <title>Game Of Life</title>
        <style>
            canvas {
                margin: 0;
                padding: 0;
                border: 1px solid;
            }
        </style>
    </head>
    <body>
        <header>
            <h2>Game Of Life</h2>
        </header>
        <section>
            <canvas id="viewport" width="800" height="800">
                <h2>Javascript is required</h2>
            </canvas>
        </section>
        <footer>
            <p>By Guy Newman</p>
        </footer>
        <script src="~/Scripts/jquery-2.0.3.min.js"></script>
        <script>
            jQuery(function () {
                (function ($) {
                    Array.matrix = function(m, n, initial) {
                        var row, i, j, matrix = [];
                        for (i = 0; i < m; i += 1) {
                            row = [];
                            for (j = 0; j < n; j += 1) {
                                row[j] = initial;
                            }
                            matrix[i] = row;
                        }
                        return matrix;
                    };

                    Array.is = function(value) {
                        return Object.prototype.toString.apply(value) === '[object Array]';
                    };

                    Array.clone = function (array) {
                        var c = array.slice(0), i;
                        for (i = 0; i < c.length; i += 1) {
                            if (Array.is(c[i])) {
                                c[i] = Array.clone(c[i]);
                            }
                        }
                        return c;
                    };
                    
                    var gameOfLife = function(options) {
                        var game = {
                            options: $.extend({
                                element: 'viewport',
                                seed: Array.matrix(100, 100, 0),
                                generations: 100
                            }, options),
                            start: function () {
                                canvas.render(options.seed);
                                simulation.plant(options.seed, function() {
                                    var i = 0,
                                        timer = setInterval(function() {
                                            if (i < options.generations) {
                                                simulation.evolve(canvas.render);
                                                i += 1;
                                            } else {
                                                clearInterval(timer);
                                            }
                                        }, 1000);
                                });
                            }
                        },
                        simulation = {
                            current: null,
                            successor: null,
                            plant: function(seed, callback) {
                                this.current = seed;
                                var m = seed.length;
                                var n = seed[0].length;
                                this.successor = Array.matrix(m, n, 0);
                                callback();
                            },
                            evolve: function(callback) {
                                var m = this.current.length, n, i, j, ac;
                                for (i = 0; i < m; i += 1) {
                                    n = this.current[i].length;
                                    for (j = 0; j < n; j += 1) {
                                        ac = this.aliveCount(i, j, m, n);
                                        if (this.current[i][j] === 1) {
                                            if (ac < 2) {
                                                this.successor[i][j] = 0;
                                            } else if (ac > 3) {
                                                this.successor[i][j] = 0;
                                            } else {
                                                this.successor[i][j] = this.current[i][j];
                                            }
                                        } else {
                                            if (ac === 3) {
                                                this.successor[i][j] = 1;
                                            } else {
                                                this.successor[i][j] = this.current[i][j];
                                            }
                                        }
                                    }
                                }
                                callback(this.successor);
                                this.current = Array.clone(this.successor);
                            },
                            aliveCount: function(i, j, m, n) {
                                var c = 0, k, l;
                                for (k = i - 1; k <= i + 1; k += 1) {
                                    for (l = j - 1; l <= j + 1; l += 1) {
                                        if (!(k === i && l === j)) {
                                            // treat array as toroidal so left wraps to right and top wraps to bottom
                                            if (k < 0 && l < 0) {
                                                c += this.current[m - 1][n - 1];
                                            } else if (k >= m && l >= n) {
                                                c += this.current[0][0];
                                            } else if (k < 0) {
                                                c += this.current[m - 1][l];
                                            } else if (k >= m) {
                                                c += this.current[0][l];
                                            } else if (l < 0) {
                                                c += this.current[k][n - 1];
                                            } else if (l >= n) {
                                                c += this.current[k][0];
                                            } else {
                                                c += this.current[k][l];
                                            }
                                        }
                                    }
                                }
                                return c;
                            }
                        },
                        canvas = {
                            render: function(matrix) {
                                var el = document.getElementById(options.element),
                                    ctx = el.getContext('2d'),
                                    cw = el.width,
                                    ch = el.height,
                                    m = matrix.length, n, i, j, w, h = ch / m;
                                ctx.clearRect(0, 0, cw, ch);
                                for (i = 0; i < m; i += 1) {
                                    n = matrix[i].length;
                                    w = cw / n;
                                    for (j = 0; j < n; j += 1) {
                                        if (matrix[i][j] === 1) {
                                            ctx.fillStyle = 'rgb(255,0,0)';
                                        } else {
                                            ctx.fillStyle = 'rgb(0,0,255)';
                                        }
                                        ctx.fillRect(j * w, i * h, w, h);
                                    }
                                }
                            }
                        };
                        return {
                            start: game.start,
                            seeds: game.seeds
                        };
                    };

                    var seeds = {
                        blinker: function() {
                            var m = 100,
                                n = 100,
                                m2 = m / 2,
                                n2 = n / 2,
                                matrix = Array.matrix(m, n, 0),
                                i;
                            // blinker in center
                            for (i = n2 - 1; i <= n2 + 1; i += 1) {
                                matrix[m2][i] = 1;
                            }
                            return matrix;
                        },
                        glider: function () {
                            var m = 10,
                                n = 10,
                                matrix = Array.matrix(m, n, 0);
                            matrix[0][2] = 1;
                            matrix[1][0] = 1;
                            matrix[1][2] = 1;
                            matrix[2][1] = 1;
                            matrix[2][2] = 1;
                            return matrix;
                        }
                    };
                    
                    gameOfLife({
                        element: 'viewport',
                        seed: seeds.glider(),
                        generations: 1000
                    }).start();
                }(jQuery));
            });
        </script>
    </body>
</html>